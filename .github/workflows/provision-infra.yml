name: Provision AWS Infrastructure

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI
  # You might also trigger this on push to a specific branch, but manual is safer for infra creation

env:
  AWS_REGION: us-east-1 # Your desired AWS region
  ECR_REPOSITORY_NAME: clipnetic-ai-frontend
  EKS_CLUSTER_NAME: clipnetic-ai
  EKS_NODEGROUP_NAME: clipnetic-ai-nodes
  K8S_VERSION: "1.31" # Or your desired Kubernetes version

jobs:
  provision-infra:
    runs-on: self-hosted # Use your self-hosted runner
    environment: # Optional: Define an environment for better visibility/security
      name: development
      # url: https://your-eks-cluster-dashboard-url.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Configure AWS credentials (if not using EC2 instance profile)
      #   # This step is only needed if your runner is NOT an EC2 instance
      #   # If your runner is an EC2 instance with an attached IAM role, remove this block.
      #   # This assumes you've manually set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as GitHub Secrets
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROVISIONER }} # Use a secret with high permissions
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROVISIONER }} # Use a secret with high permissions
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS CLI installation
        run: aws --version

      - name: Create ECR Repository
        id: create_ecr
        run: |
          set -euo pipefail

          echo "Checking if ECR repository '${{ env.ECR_REPOSITORY_NAME }}' exists..."

          if aws ecr describe-repositories \
              --repository-names "${{ env.ECR_REPOSITORY_NAME }}" \
              --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "ECR repository already exists."
          else
            echo "ECR repository does not exist. Creating..."
            aws ecr create-repository \
              --repository-name "${{ env.ECR_REPOSITORY_NAME }}" \
              --image-tag-mutability MUTABLE \
              --image-scanning-configuration scanOnPush=true \
              --region "${{ env.AWS_REGION }}"
            echo "ECR repository created successfully."
          fi

          # Fetch and export ECR URI
          ECR_URI=$(aws ecr describe-repositories \
            --repository-names "${{ env.ECR_REPOSITORY_NAME }}" \
            --query "repositories[0].repositoryUri" \
            --output text \
            --region "${{ env.AWS_REGION }}")

          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "ECR repository URI: $ECR_URI"

      - name: Create EKS Cluster
        id: create_eks
        run: |
          set -euo pipefail

          echo "Checking if EKS cluster ${{ env.EKS_CLUSTER_NAME }} exists..."
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} && CLUSTER_EXISTS=true || CLUSTER_EXISTS=false

          if [ "$CLUSTER_EXISTS" = false ]; then
            echo "EKS cluster does not exist, creating with eksctl..."
            cat <<EOF > cluster-config.yaml
          apiVersion: eksctl.io/v1alpha5
          kind: ClusterConfig
          metadata:
            name: ${{ env.EKS_CLUSTER_NAME }}
            region: ${{ env.AWS_REGION }}
            version: "${{ env.K8S_VERSION }}"
          managedNodeGroups:
            - name: ${{ env.EKS_NODEGROUP_NAME }}
              instanceType: t3.medium
              desiredCapacity: 2
              minSize: 1
              maxSize: 3
              labels: {role: worker}
              tags:
                Name: "${{ env.EKS_CLUSTER_NAME }}-${{ env.EKS_NODEGROUP_NAME }}"
          EOF
            eksctl create cluster -f cluster-config.yaml
            echo "EKS cluster ${{ env.EKS_CLUSTER_NAME }} created."
          else
            echo "EKS cluster ${{ env.EKS_CLUSTER_NAME }} already exists, skipping creation."
          fi

          # Update kubeconfig to ensure kubectl can connect, regardless of whether it was just created
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Verify EKS Cluster and Nodes
        run: |
          kubectl get nodes
          kubectl get svc -n kube-system # Check for basic services

      - name: Inject GitHub Actions IAM Role into EKS aws-auth ConfigMap
        # Use eksctl create iamidentitymapping for robustness
        run: |
          set -euo pipefail

          # Validate AWS_ACCOUNT_ID for debug purposes
          if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
              echo "Error: AWS_ACCOUNT_ID secret is not set! Cannot construct IAM role ARN."
              exit 1
          fi

          GITHUB_ACTIONS_DEPLOY_ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsECREKSRole"

          echo "Attempting to inject IAM role '${GITHUB_ACTIONS_DEPLOY_ROLE_ARN}' into EKS aws-auth ConfigMap..."

          eksctl create iamidentitymapping \
            --cluster ${{ env.EKS_CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --arn "${GITHUB_ACTIONS_DEPLOY_ROLE_ARN}" \
            --username github-actions-user \
            --group system:masters \
            --no-duplicate-arns \
            --verbose 4 # Add verbose flag for more debug info in the logs

          echo "eksctl command executed. Waiting for aws-auth ConfigMap changes to propagate..."
          sleep 60 # **INCREASED SLEEP TO 60 SECONDS** - This is often the key!

          echo "Current aws-auth ConfigMap content:"
          kubectl get configmap aws-auth -n kube-system -o yaml || echo "Failed to get aws-auth ConfigMap. This may be a propagation delay or permission issue."

      - name: Confirm GitHub Actions Role can access EKS (with retries)
        run: |
          set -euo pipefail
          echo "Verifying kubectl access for github-actions-user..."

          MAX_RETRIES=5
          RETRY_DELAY=15 # seconds
          for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i/$MAX_RETRIES: Running kubectl auth can-i get deployments --as=github-actions-user..."
              if kubectl auth can-i get deployments --as=github-actions-user; then
                  echo "SUCCESS: kubectl auth can-i check PASSED!"
                  exit 0
              else
                  echo "FAILED: kubectl auth can-i check returned 'no'. Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
              fi
          done
          echo "ERROR: kubectl auth can-i check FAILED after $MAX_RETRIES attempts."
          exit 1 # Explicitly fail the step if all retries fail

      # - name: Output ECR Repository URI
      #   run: echo "::notice::ECR Repository URI: ${{ env.ECR_URI }}"
